return(data.frame("ACC" = ACCCalculation(graph_sub), "EN" = length(E(graph_sub))))
}, W_net), thresholds = thresholds)
ACC_W <- do.call(rbind, sapply(thresholds, function(t, graph){
graph_sub <- subgraph.edges(graph, E(graph)[weight >= t])
df <- data.frame(ACC = ACCCalculation(graph_sub), thresholds = t, EN = length(E(graph_sub)))
return(df)
}, W_net))
ACC_W
sapply(thresholds, function(t, graph){
graph_sub <- subgraph.edges(graph, E(graph)[weight >= t])
df <- data.frame(ACC = ACCCalculation(graph_sub), thresholds = t, EN = length(E(graph_sub)))
return(df)
}, W_net)
ACC_W <- sapply(thresholds, function(t, graph){
graph_sub <- subgraph.edges(graph, E(graph)[weight >= t])
df <- t(data.frame(ACC = ACCCalculation(graph_sub), thresholds = t, EN = length(E(graph_sub))))
return(df)
}, W_net)
ACC_W
ACC_W <- sapply(thresholds, function(t, graph){
graph_sub <- subgraph.edges(graph, E(graph)[weight >= t])
df <- data.frame(ACC = ACCCalculation(graph_sub), thresholds = t, EN = length(E(graph_sub)))
return(df)
}, W_net)
head(ACC_W)
head(t(ACC_W))
ACC_W <- t(sapply(thresholds, function(t, graph){
graph_sub <- subgraph.edges(graph, E(graph)[weight >= t])
df <- data.frame(ACC = ACCCalculation(graph_sub), thresholds = t, EN = length(E(graph_sub)))
return(df)
}, W_net))
plot(x = ACC_W$thresholds, y = ACC_W$EN, xlab = "thresholds", ylab = "number of edges", main = "EN of the Fused network W", type = "o")
ACC_W$EN
ACC_W
str(ACC_W)
str(as.data.frame(ACC_W))
str(ACC_W)
ACC_W <- sapply(thresholds, function(t, graph){
graph_sub <- subgraph.edges(graph, E(graph)[weight >= t])
df <- data.frame(ACC = ACCCalculation(graph_sub), thresholds = t, EN = length(E(graph_sub)))
return(df)
}, W_net)
ACC_W <- lapply(thresholds, function(t, graph){
graph_sub <- subgraph.edges(graph, E(graph)[weight >= t])
df <- data.frame("ACC" = ACCCalculation(graph_sub), "thresholds" = t, "EN" = length(E(graph_sub)))
return(df)
}, W_net)
head(ACC_W)
do.call(rbind, ACC_W)
ACC_W <- do.call(rbind, lapply(thresholds, function(t, graph){
graph_sub <- subgraph.edges(graph, E(graph)[weight >= t])
df <- data.frame("ACC" = ACCCalculation(graph_sub), "thresholds" = t, "EN" = length(E(graph_sub)))
return(df)
}, W_net))
plot(x = ACC_W$thresholds, y = ACC_W$EN, xlab = "thresholds", ylab = "number of edges", main = "EN of the Fused network W", type = "o")
plot(x = ACC_W$thresholds, y = ACC_W$EN, xlab = "thresholds", ylab = "number of edges", main = "EN of the Fused network W", type = "o")
abline(v = ACC_W$thresholds[29], col = "red")
plot(x = ACC_W$thresholds, y = ACC_W$ACC, xlab = "thresholds", ylab = "ACC", main = "ACC calculation of the Fused network W", type = "o")
points(x = ACC_W$thresholds[1], y = ACC_W$ACC[1], col = "red", pch = 16, cex = 1.2)
points(x = ACC_W$thresholds[21], y = ACC_W$ACC[21], col = "purple", pch = 16, cex = 1.2)
points(x = ACC_W$thresholds[29], y = ACC_W$ACC[29], col = "pink", pch = 16, cex = 1.2)
abline(v = ACC_W$thresholds[29], col = "red")
plot(x = ACC_W$thresholds, y = ACC_W$ACC, xlab = "thresholds", ylab = "ACC", main = "ACC calculation of the Fused network W", type = "o")
points(x = ACC_W$thresholds[1], y = ACC_W$ACC[1], col = "red", pch = 16, cex = 1.2)
points(x = ACC_W$thresholds[21], y = ACC_W$ACC[21], col = "purple", pch = 16, cex = 1.2)
points(x = ACC_W$thresholds[29], y = ACC_W$ACC[29], col = "pink", pch = 16, cex = 1.2)
abline(v = ACC_W$thresholds[29], col = "red")
text(ACC_W$thresholds[29], 0.6, pos = 2, paste0("t = ",  ACC_W$thresholds[29]), col = "red")
text(ACC_W$thresholds[29], 0.6, pos = 4, paste0("t = ",  ACC_W$thresholds[29]), col = "red")
plot(x = ACC_W$thresholds, y = ACC_W$EN, xlab = "thresholds", ylab = "number of edges", main = "EN of the Fused network W", type = "o")
abline(v = ACC_W$thresholds[29], col = "red")
text(ACC_W$thresholds[29], 0.6, pos = 4, paste0("ACCmax = ",  ACC_W$thresholds[29]), col = "red")
text(ACC_W$thresholds[29], 2000, pos = 4, paste0("ACCmax = ",  ACC_W$thresholds[29]), col = "red")
W_df <- as_data_frame(W_net)
head(W_df)
W_df <- as_data_frame(W_net)
data1_df <- as_data_frame(data1_net)
data1_net <- graph_from_adjacency_matrix(data1_W, weighted = TRUE, mode = "upper", diag = FALSE)
data2_net <- graph_from_adjacency_matrix(data2_W, weighted = TRUE, mode = "upper", diag = FALSE)
W_df <- as_data_frame(W_net)
data1_df <- as_data_frame(data1_net)
data2_df <- as_data_frame(data2_net)
tmp <- merge(data1_df, data2_df, by = c(1,2), suffixes = c("_data1", "_data2"))
weights_df <- merge(tmp, W_df, by = c(1,2))
head(weights_df)
edgeSources <- do.call(rbind, apply((weights_df), 1, function(line){
weights_v <- c(as.numeric(line[3]), as.numeric(line[4]))
names(weights_v) <- c("weight_data1", "weight_data2")
weights_v <- sort(weights_v, decreasing = TRUE)
if((weights_v[1] - weights_v[2]) >= (weights_v[2]*10/100)){
source = names(weights_v[1])
}
else{
source = "both_data"
}
df <- data.frame("from" = line["from"],
"to" = line["to"],
"source" = source,
"data1" = weights_v["weight_data1"],
"data2" = weights_v["weight_data2"],
"W" = line["weight"])
return(df)
}))
table(edgeSources$source)
as_data_frame(W_net)
data1_net <- graph_from_adjacency_matrix(data1_W, weighted = TRUE, mode = "upper", diag = FALSE)
thresholds <- seq(0, 0.008, 0.00002)
ACC_data1 <- do.call(rbind, lapply(thresholds, function(t, graph){
graph_sub <- subgraph.edges(graph, E(graph)[weight >= t])
df <- data.frame("ACC" = ACCCalculation(graph_sub), "thresholds" = t, "EN" = length(E(graph_sub)))
return(df)
}, data1_net))
plot(x = ACC_data1$thresholds, y = ACC_data1$ACC, xlab = "thresholds", ylab = "ACC", main = "Data 1", type = "o")
View(ACC_data1)
data2_net <- graph_from_adjacency_matrix(data2_W, weighted = TRUE, mode = "upper", diag = FALSE)
thresholds <- seq(0, 0.012, 0.00005)
ACC_data2 <- do.call(rbind, lapply(thresholds, function(t, graph){
graph_sub <- subgraph.edges(graph, E(graph)[weight >= t])
df <- data.frame("ACC" = ACCCalculation(graph_sub), "thresholds" = t, "EN" = length(E(graph_sub)))
return(df)
}, data2_net))
View(ACC_data2)
ACC_data1plot(x = ACC_data2$thresholds, y = ACC_data2$ACC, xlab = "thresholds", ylab = "ACC", main = "Data 2", type = "o")
plot(x = ACC_data2$thresholds, y = ACC_data2$ACC, xlab = "thresholds", ylab = "ACC", main = "Data 2", type = "o")
plot(x = ACC_W$thresholds, y = ACC_W$ACC, xlab = "thresholds", ylab = "ACC", main = "ACC calculation of the Fused network W", type = "o")
ACC_W$thresholds[29]
data1_subNet <- subgraph.edges(data1_net, E(data1_net)[weight >= 0.00066])
data2_subNet <- subgraph.edges(data2_net, E(data2_net)[weight >= 0.00105])
W_subNet <- subgraph.edges(W_net, E(W_net)[weight >= 0.014])
write.table(as_data_frame(W_subNet), "02_Results/TARAOcean_W_edgesListFilt.txt", quote = FALSE, col.names = TRUE, row.names = FALSE, sep = "\t")
write.table(as_data_frame(W_subNet), "02_Results/TARAOcean_W_edgesListFilt.txt", quote = FALSE, col.names = TRUE, row.names = FALSE, sep = "\t")
write.table(as_data_frame(data1_subNet), "02_Results/TARAOcean_data1_edgesListFilt.txt", quote = FALSE, col.names = TRUE, row.names = FALSE, sep = "\t")
write.table(as_data_frame(data2_subNet), "02_Results/TARAOcean_data2_edgesListFilt.txt", quote = FALSE, col.names = TRUE, row.names = FALSE, sep = "\t")
write.table(edgeSources, "02_Results/TaraOcean_sourceOfEgdes.txt", quote = FALSE, col.names = TRUE, row.names = FALSE, sep = "\t")
write.table(as_data_frame(W_net), "02_Results/TARAOcean_W_edgesList.txt", quote = FALSE, col.names = TRUE, row.names = FALSE, sep = "\t")
write.table(as_data_frame(data1_net), "02_Results/TARAOcean_data1_edgesList.txt", quote = FALSE, col.names = TRUE, row.names = FALSE, sep = "\t")
write.table(as_data_frame(data1_net), "02_Results/TARAOcean_data2_edgesList.txt", quote = FALSE, col.names = TRUE, row.names = FALSE, sep = "\t")
?standardNormalization
workDir <- "/home/morgane/Documents/01_Projects/04_IFB/ETBII/etbii/THEMATIC-SESSIONS/Networks/SNF/"
knitr::opts_knit$set(root.dir = workDir) ## = setwd()
knitr::opts_chunk$set(cache = TRUE)
options(knitr.table.format = "html")
library("SNFtool")
?standardNormalization
data2 <- read.table(file = "00_Data/TaraOcean_mibiomics/TARAoceans_proPhylo.csv", sep = ",", head = TRUE, row.names = 1)
data2[c(1:5), c(1:3)]
workDir <- "/home/morgane/Documents/01_Projects/04_IFB/ETBII/etbii/THEMATIC-SESSIONS/Networks/SNF/"
knitr::opts_knit$set(root.dir = workDir) ## = setwd()
knitr::opts_chunk$set(cache = TRUE)
options(knitr.table.format = "html")
library("rmarkdown")
library("knitr")
library("rmdformats")
library("bookdown")
library("kableExtra")
library("SNFtool")
library("network")
library("network")
library("igraph")
library("ggplot2")
library("ggpmisc")
library("ggpmisc")
library("pheatmap")
library("pheatmap")
library("cccd")
data1 <- read.table(file = "00_Data/TaraOcean_mibiomics/TARAoceans_proNOGS.csv", sep = ",", head = TRUE, row.names = 1)
data1[c(1:5), c(1:5)]
data1_norm <- standardNormalization(data1)
data2 <- read.table(file = "00_Data/TaraOcean_mibiomics/TARAoceans_proPhylo.csv", sep = ",", head = TRUE, row.names = 1)
data2_norm <- standardNormalization(data2)
```{r metadata}
metadata <- read.table(file = "00_Data/TaraOcean_mibiomics/TARAoceans_metadata.csv", sep = ",", head = TRUE, row.names = 1)
data1_dist <- dist2(as.matrix(data1_norm), as.matrix(data1_norm))
data2_dist <- dist2(as.matrix(data2_norm), as.matrix(data2_norm))
K = 20
alpha = 0.5
data1_W <- affinityMatrix(data1_dist, K, alpha)
data2_W <- affinityMatrix(data2_dist, K, alpha)
T = 10
W <- SNF(list(data1_W, data2_W), K, T)
## CC calculation function
CCCalculation <- function(node, graph){
degNode <- degree(graph = graph, v = node, loops = FALSE)
if(degNode > 1){
neighborNames <- neighbors(graph = graph, v = node)
graph_s <- subgraph(graph = graph, vids = neighborNames)
neighborNb <- sum(degree(graph_s, loops = FALSE))
CC <- neighborNb / (degNode * (degNode-1))
}else{CC <- 0}
return(CC)
}
## ACC calculation function
ACCCalculation <- function(graph){
nodes <- V(graph)
ACC <- do.call(sum, lapply(nodes, CCCalculation, graph)) / length(nodes)
return(ACC)
}
thresholds <- seq(0, 0.1, 0.0005)
W_net <- graph_from_adjacency_matrix(W, weighted = TRUE, mode = "upper", diag = FALSE)
ACC_W <- do.call(rbind, lapply(thresholds, function(t, graph){
graph_sub <- subgraph.edges(graph, E(graph)[weight >= t])
df <- data.frame("ACC" = ACCCalculation(graph_sub), "thresholds" = t, "EN" = length(E(graph_sub)))
return(df)
}, W_net))
ACC_W$thresholds[29]
ACC_W$thresholds[29,]
ACC_W$thresholds[,29]
ACC_W[29]
ACC_W[29,]
ACC_W[29,"EN"]
W_df <- as_data_frame(W_net)
data1_df <- as_data_frame(data1_net)
data2_df <- as_data_frame(data2_net)
data2_net <- graph_from_adjacency_matrix(data2_W, weighted = TRUE, mode = "upper", diag = FALSE)
data1_net <- graph_from_adjacency_matrix(data1_W, weighted = TRUE, mode = "upper", diag = FALSE)
W_df <- as_data_frame(W_net)
data1_df <- as_data_frame(data1_net)
data2_df <- as_data_frame(data2_net)
tmp <- merge(data1_df, data2_df, by = c(1,2), suffixes = c("_data1", "_data2"))
weights_df <- merge(tmp, W_df, by = c(1,2))
head(weights_df)
edgeSources <- do.call(rbind, apply((weights_df), 1, function(line){
weights_v <- c(as.numeric(line[3]), as.numeric(line[4]))
names(weights_v) <- c("weight_data1", "weight_data2")
weights_v <- sort(weights_v, decreasing = TRUE)
if((weights_v[1] - weights_v[2]) >= (weights_v[2]*10/100)){
source = names(weights_v[1])
}
else{
source = "both_data"
}
df <- data.frame("from" = line["from"],
"to" = line["to"],
"source" = source,
"data1" = weights_v["weight_data1"],
"data2" = weights_v["weight_data2"],
"W" = line["weight"])
return(df)
}))
as.data.frame(table(edgeSources$source))
library("compositions")
?clr
?tss
library("ecodist")
?tss
wk_dir <- "/home/morgane/Documents/01_Projects/03_OtherProjects/10_Epilepsy_eqLV_Lucile/03_Integration/02_MOFA2/05_PriseEnMainMEFISTO/"
knitr::opts_knit$set(root.dir = file.path(wk_dir)) ## = setwd()
source("priseEnMainMEFISTO_functions.R")
library("MOFA2")
library("MOFA2")
library("PCAtools")
install.packages("PCAtools")
BiocManager::install("PCAtools")
library("PCAtools")
library("PCAtools")
library("data.table")
library("DESeq2")
library("DESeq2")
library("limma")
library("reshape2")
modelFile <- "00_Data/MEFISTO_KCNQ2_20220119_factors6_maxiter4000_2groups_newNormalization.hdf5"
MOFAobject <- load_model(file = modelFile)
modelFile <- "00_Data/MEFISTO_KCNQ2_20220119_factors6_maxiter4000_2groups_newNormalization.hdf5"
?load_model
MOFAobject <- load_model(file = modelFile)
?H5Fopen
8000*8000
8000*8000/30
34150980/30
37887*1/3600
0.00287125634075211 < 0.4
0.00287125634075211 > 0.4
x <- -1:12
x
x %% 2
x %/% 2
28*28
512*16
library("DESeq2")
?vst
## LIBRARIES
library("ggplot2")
## USE-CASE 1
work_dir <- "/home/morgane/Documents/01_Projects/05_EJPRD/01_WF_Environment/ODAMNet_figures/UseCase1/"
data_dir <- "/home/morgane/Documents/01_Projects/05_EJPRD/01_WF_Environment/ODAMNet/useCases/OutputResults_useCase1/"
## DOMINO RESULTS
AM_file <- "OutputDOMINOResults/DOMINO_D014801_activeModulesNetworkMetrics.txt"
AM <- read.table(file = AM_file, head = TRUE, sep = "\t")
AM$AMINumber <- as.factor(AM$AMINumber)
AM$ActiveGenesNumberPer <- round(AM$ActiveGenesNumber * 100 / AM$NodesNumber, digits = 0)
head(AM)
## USE-CASE 1
work_dir <- "/home/morgane/Documents/01_Projects/05_EJPRD/01_WF_Environment/ODAMNet_figures/UseCase1/"
data_dir <- "/home/morgane/Documents/01_Projects/05_EJPRD/01_WF_Environment/ODAMNet/useCases/OutputResults_useCase1/"
## DOMINO RESULTS
AM_file <- paste0(data_dir, "OutputDOMINOResults/DOMINO_D014801_activeModulesNetworkMetrics.txt")
AM <- read.table(file = AM_file, head = TRUE, sep = "\t")
AM$AMINumber <- as.factor(AM$AMINumber)
AM$ActiveGenesNumberPer <- round(AM$ActiveGenesNumber * 100 / AM$NodesNumber, digits = 0)
head(AM)
ggplot(AM, aes(x = AMINumber)) +
geom_col(aes(y = 4*NodesNumber, fill = "Genes"), size = 0.5, color = "grey70") +
geom_col(aes(y = 4*ActiveGenesNumber, fill = "Target genes"), size = 0.5, color = "grey70") +
geom_point(aes(y = EdgesNumber, color = ""), size = 0.7, group = 1) +
geom_text(aes(y = 4*NodesNumber + 13, label = paste0(as.character(ActiveGenesNumberPer), " %"))) +
scale_y_continuous(name = "Edges number", limits = c(0, 400), sec.axis = sec_axis(~./4, name = "Nodes number")) +
scale_fill_manual("Nodes", values = c("white", "grey80")) + scale_color_manual("Edges", values = "salmon") +
xlab("Identified active modules") + ggtitle("Identified active modules by DOMINO") +
theme_minimal() +
theme(text = element_text(size = 13),
plot.title = element_text(hjust = 0.5, face = "bold"),
legend.position = "bottom")
ggplot(AM, aes(x = AMINumber)) +
geom_col(aes(y = 4*NodesNumber, fill = "Genes"), size = 0.5, color = "grey70") +
geom_col(aes(y = 4*ActiveGenesNumber, fill = "Target genes"), size = 0.5, color = "grey70") +
geom_point(aes(y = EdgesNumber, color = ""), group = 1) +
geom_text(aes(y = 4*NodesNumber + 13, label = paste0(as.character(ActiveGenesNumberPer), " %"))) +
scale_y_continuous(name = "Edges number", limits = c(0, 400), sec.axis = sec_axis(~./4, name = "Nodes number")) +
scale_fill_manual("Nodes", values = c("white", "grey80")) + scale_color_manual("Edges", values = "salmon") +
xlab("Identified active modules") + ggtitle("Identified active modules by DOMINO") +
theme_minimal() +
theme(text = element_text(size = 13),
plot.title = element_text(hjust = 0.5, face = "bold"),
legend.position = "bottom")
ggplot(AM, aes(x = AMINumber)) +
geom_col(aes(y = 4*NodesNumber, fill = "Genes"), size = 0.5, color = "grey70") +
geom_col(aes(y = 4*ActiveGenesNumber, fill = "Target genes"), size = 0.5, color = "grey70") +
geom_point(aes(y = EdgesNumber, color = ""), group = 1) +
geom_text(aes(y = 4*NodesNumber + 13, label = paste0(as.character(ActiveGenesNumberPer), " %"))) +
scale_y_continuous(name = "Edge number", limits = c(0, 400), sec.axis = sec_axis(~./4, name = "Node number")) +
scale_fill_manual("Nodes", values = c("white", "grey80")) + scale_color_manual("Edge number", values = "salmon") +
xlab("Identified active modules") + ggtitle("Identified active modules by DOMINO") +
theme_minimal() +
theme(text = element_text(size = 13),
plot.title = element_text(hjust = 0.5, face = "bold"),
legend.position = "bottom")
## Only nodes information
ggplot(AM, aes(x = AMINumber)) +
geom_col(aes(y = 4*NodesNumber, fill = "Genes"), size = 0.5, color = "grey70") +
geom_col(aes(y = 4*ActiveGenesNumber, fill = "Target genes"), size = 0.5, color = "grey70") +
# geom_point(aes(y = EdgesNumber, color = ""), group = 1) +
geom_text(aes(y = 4*NodesNumber + 13, label = paste0(as.character(ActiveGenesNumberPer), " %"))) +
scale_y_continuous(name = "Edge number", limits = c(0, 400), sec.axis = sec_axis(~./4, name = "Node number")) +
scale_fill_manual("Nodes", values = c("white", "grey80")) + scale_color_manual("Edge number", values = "salmon") +
xlab("Identified active modules") + ggtitle("Identified active modules by DOMINO") +
theme_minimal() +
theme(text = element_text(size = 13),
plot.title = element_text(hjust = 0.5, face = "bold"),
legend.position = "bottom")
## Only nodes information
ggplot(AM, aes(x = AMINumber)) +
geom_col(aes(y = 4*NodesNumber, fill = "Genes"), size = 0.5, color = "grey70") +
geom_col(aes(y = 4*ActiveGenesNumber, fill = "Target genes"), size = 0.5, color = "grey70") +
# geom_point(aes(y = EdgesNumber, color = ""), group = 1) +
geom_text(aes(y = 4*NodesNumber + 13, label = paste0(as.character(ActiveGenesNumberPer), " %"))) +
# scale_y_continuous(name = "Edge number", limits = c(0, 400), sec.axis = sec_axis(~./4, name = "Node number")) +
scale_fill_manual("Nodes", values = c("white", "grey80")) + scale_color_manual("Edge number", values = "salmon") +
xlab("Identified active modules") + ggtitle("Identified active modules by DOMINO") +
theme_minimal() +
theme(text = element_text(size = 13),
plot.title = element_text(hjust = 0.5, face = "bold"),
legend.position = "bottom")
## Only nodes information
ggplot(AM, aes(x = AMINumber)) +
geom_col(aes(y = NodesNumber, fill = "Genes"), size = 0.5, color = "grey70") +
geom_col(aes(y = ActiveGenesNumber, fill = "Target genes"), size = 0.5, color = "grey70") +
# geom_point(aes(y = EdgesNumber, color = ""), group = 1) +
geom_text(aes(y = 4*NodesNumber + 13, label = paste0(as.character(ActiveGenesNumberPer), " %"))) +
# scale_y_continuous(name = "Edge number", limits = c(0, 400), sec.axis = sec_axis(~./4, name = "Node number")) +
scale_fill_manual("Nodes", values = c("white", "grey80")) + scale_color_manual("Edge number", values = "salmon") +
xlab("Identified active modules") + ggtitle("Identified active modules by DOMINO") +
theme_minimal() +
theme(text = element_text(size = 13),
plot.title = element_text(hjust = 0.5, face = "bold"),
legend.position = "bottom")
## Only nodes information
ggplot(AM, aes(x = AMINumber)) +
geom_col(aes(y = NodesNumber, fill = "Genes"), size = 0.5, color = "grey70") +
geom_col(aes(y = ActiveGenesNumber, fill = "Target genes"), size = 0.5, color = "grey70") +
# geom_point(aes(y = EdgesNumber, color = ""), group = 1) +
geom_text(aes(y = NodesNumber + 13, label = paste0(as.character(ActiveGenesNumberPer), " %"))) +
# scale_y_continuous(name = "Edge number", limits = c(0, 400), sec.axis = sec_axis(~./4, name = "Node number")) +
scale_fill_manual("Nodes", values = c("white", "grey80")) + scale_color_manual("Edge number", values = "salmon") +
xlab("Identified active modules") + ggtitle("Identified active modules by DOMINO") +
theme_minimal() +
theme(text = element_text(size = 13),
plot.title = element_text(hjust = 0.5, face = "bold"),
legend.position = "bottom")
13/4
## Only nodes information
ggplot(AM, aes(x = AMINumber)) +
geom_col(aes(y = NodesNumber, fill = "Genes"), size = 0.5, color = "grey70") +
geom_col(aes(y = ActiveGenesNumber, fill = "Target genes"), size = 0.5, color = "grey70") +
# geom_point(aes(y = EdgesNumber, color = ""), group = 1) +
geom_text(aes(y = NodesNumber + 3, label = paste0(as.character(ActiveGenesNumberPer), " %"))) +
# scale_y_continuous(name = "Edge number", limits = c(0, 400), sec.axis = sec_axis(~./4, name = "Node number")) +
scale_fill_manual("Nodes", values = c("white", "grey80")) + scale_color_manual("Edge number", values = "salmon") +
xlab("Identified active modules") + ggtitle("Identified active modules by DOMINO") +
theme_minimal() +
theme(text = element_text(size = 13),
plot.title = element_text(hjust = 0.5, face = "bold"),
legend.position = "bottom")
## Only nodes information
ggplot(AM, aes(x = AMINumber)) +
geom_col(aes(y = NodesNumber, fill = "Genes"), size = 0.5, color = "grey70") +
geom_col(aes(y = ActiveGenesNumber, fill = "Target genes"), size = 0.5, color = "grey70") +
# geom_point(aes(y = EdgesNumber, color = ""), group = 1) +
geom_text(aes(y = NodesNumber + 3, label = paste0(as.character(ActiveGenesNumberPer), " %"))) +
# scale_y_continuous(name = "Edge number", limits = c(0, 400), sec.axis = sec_axis(~./4, name = "Node number")) +
scale_fill_manual("Nodes", values = c("white", "grey80")) + scale_color_manual("Edge number", values = "salmon") +
xlab("Identified active modules") + ggtitle("Active modules identified using DOMINO") +
theme_minimal() +
theme(text = element_text(size = 13),
plot.title = element_text(hjust = 0.5, face = "bold"),
legend.position = "bottom")
ggsave(filename = paste(work_dir, "IdentifiedActiveModules_barplot.png", sep = "/"), device = "png", dpi = 320)
12+5+2
19*100/35
8+2+6
16*100/35
12+5+2+8+2+6
28*100/35
19*100/35
10*100/35
20*100/35
12+5+3+3+2+2+11
38*100/104
12+5+3
28*100/38
19*100/38
20*100/38
3+2+2+11
18*100/38
20/38*100
2/3
2/3 > 1/2
1/3
2/4
7*8
50*800/100+50*1800/100
## LIBRARIES
library("UpSetR")
library("Vennerable")
source(file = "/home/morgane/Documents/00_Tools/00_Scripts/R/DESeq2_functions.R")
libPaths()
.libPaths()
.libPaths("/home/morgane/R/x86_64-pc-linux-gnu-library/4.2")
.libPaths
.libPaths()
library("DESeq2")
library("SummarizedExperiment")
library("UpSetR")
## LIBRARIES
library("UpSetR")
library("Vennerable")
install.packages("lattice")
library("Vennerable")
source(file = "/home/morgane/Documents/00_Tools/00_Scripts/R/DESeq2_functions.R")
## WORK DIRECTORY
work_dir <- "/home/morgane/Documents/01_Projects/05_EJPRD/01_WF_Environment/ODAMNet/useCases/OutputResults_useCase1/Comparison/"
setwd(dir = work_dir)
## WORK DIRECTORY
work_dir <- "/home/morgane/Documents/01_Projects/05_EJPRD/01_WF_Environment/ODAMNet/useCases/OutputResults_useCase1/orsum/"
setwd(dir = work_dir)
## OVERLAP RESULTS
overlap <- read.table(file = "00_Data/DOMINO_D014801.4Orsum", sep = "\t", head = TRUE)
head(overlap); nrow(overlap)
## OVERLAP RESULTS
overlap <- read.table(file = "00_Data/DOMINO_D014801.4Orsum", sep = "\t", head = false)
## OVERLAP RESULTS
overlap <- read.table(file = "00_Data/DOMINO_D014801.4Orsum", sep = "\t", head = FALSE)
head(overlap); nrow(overlap)
## OVERLAP RESULTS
overlap <- read.table(file = "00_Data/Overlap_D014801.4Orsum", sep = "\t", head = FALSE)
head(overlap); nrow(overlap)
## AMI RESULTS
AMI <- read.table(file = "00_Data/DOMINO_D014801.4Orsum", sep = "\t", head = FALSE)
head(AMI)
## CECILE MULTIPLEX
RWR <- read.table(file = "00_Data/RWR_D014801.4Orsum", sep = "\t", head = FALSE)
head(RWR)
## VEN DIAGRAMM
UseCase1_list <- c(list("Overlap" = overlap$V1, "RWR" = RWR$V1, "AMI" = AMI$V1))
upset(data = UseCase1_list, nsets = length(UseCase1_list), text.scale = 2, sets = c("Overlap", "AMI", "RWR"), keep.order = TRUE)
## VEN DIAGRAMM
UseCase1_list <- c(list("Overlap" = overlap$V1, "RWR" = RWR$V1, "AMI" = AMI$V1))
upset(data = UseCase1_list, nsets = length(UseCase1_list), text.scale = 2, sets = c("Overlap", "AMI", "RWR"), keep.order = TRUE)
UseCase1_list
length(UseCase1_list)
UseCase1_matrix <- createMatrix4Upset(UseCase1_list)
upset(data = UseCase1_matrix, nsets = length(UseCase1_matrix), text.scale = 2, sets = c("Overlap", "AMI", "RWR"), keep.order = TRUE)
## WORK DIRECTORY
work_dir <- "/home/morgane/Documents/01_Projects/05_EJPRD/01_WF_Environment/ODAMNet/useCases/OutputResults_useCase2/orsum/"
setwd(dir = work_dir)
## OVERLAP RESULTS
overlap <- read.table(file = "00_Data/Overlap_D014801.4Orsum", sep = "\t", head = FALSE)
## OVERLAP RESULTS
overlap <- read.table(file = "00_Data/Overlap.4Orsum", sep = "\t", head = FALSE)
head(overlap); nrow(overlap)
## AMI RESULTS
AMI <- read.table(file = "00_Data/DOMINO.4Orsum", sep = "\t", head = FALSE)
head(AMI)
## CECILE MULTIPLEX
RWR <- read.table(file = "00_Data/RWR_top5.4Orsum", sep = "\t", head = FALSE)
head(RWR)
## VENN DIAGRAM
UseCase2_list <- c(list("Overlap" = overlap$V1, "RWR" = RWR$V1, "AMI" = AMI$V1))
UseCase2_matrix <- createMatrix4Upset(UseCase2_list)
upset(data = UseCase2_matrix, nsets = length(UseCase2_matrix), text.scale = 2, sets = c("Overlap", "AMI", "RWR"), keep.order = TRUE)
11*100/38
18*100/38
5*100/10
